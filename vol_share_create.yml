- hosts: localhost
  collections:
    - netapp.ontap
  # connection: local
  gather_facts: false
  name: Volume Action

  vars:
    hostname: "{{ cluster_name }}"
    username: "{{ netapp_username }}"
    password: "{{ netapp_password }}"
    vserver: "{{ vserver }}"
    sec_vserver: 'mir_{{ vserver }}'
    #aggr: aggr2_node01_10T_SATA 
    vol_name: "{{ vol_name }}"
    size: "{{ vol_size }}"
    #disk_type: "{{ disk_type }}"
    share_path: #"{{ share_path }}"
    share_name: #"{{ share_name }}"
    sec_cluster: "{{ sec_cluster }}"
        
  tasks:
#  - name: gather cluster vars
#    include_vars:
#      dir: /home/ansible/inventory
#      files_matching: '^(.*).yml$'
#      name: inventory_vars

  - name: Get Snapshot and node type  
    na_ontap_info: 
      state: info 
      hostname: "{{ hostname }}" 
      username: "{{ username }}" 
      password: "{{ password }}" 
      https: true 
      validate_certs: false
      gather_subset: 
        - "snapshot_policy_info"
        - "sysconfig_info"
    register: ontap_info
  - set_fact:
      snap_pol: "{{snap_pol|default([]) + [ ontap_info.ontap_info.snapshot_policy_info[item].policy ]  }}"
    with_items: "{{ ontap_info.ontap_info.snapshot_policy_info }}"
    when: ontap_info.ontap_info.snapshot_policy_info[item].policy is search("Daily-.*") 
  - set_fact:
      snap_pol: "{{ snap_pol |random }}"    
  - debug:
      msg: "{{ snap_pol }}" 
  - set_fact:
      node_type: "{{ ontap_info.ontap_info.sysconfig_info[item].prod_type }}" 
    with_items: "{{ ontap_info.ontap_info.sysconfig_info }}"
  - debug:
      msg: "{{ node_type }}"  
      

  - name: set disk type
    set_fact:
      disk_type: "{{ 'ssd' if node_type == 'AFF' else 'hdd,vmdisk' }}" 
    
 
    
    
      
  - name: Gather facts 
    na_ontap_gather_facts: 
      state: info
      hostname: "{{ hostname }}" 
      username: "{{ username }}" 
      password: "{{ password }}" 
      https: true 
      validate_certs: false
  - set_fact:
      aggr_facts: "{{ aggr_facts|default([]) + [ {'aggr_name': ontap_facts.aggregate_info[item].aggregate_name, 'used_pct': ontap_facts.aggregate_info[item].aggr_space_attributes.physical_used_percent} ] }}"
    with_items: "{{ ontap_facts.aggregate_info }}"
    when:
    - "{{ ontap_facts.aggregate_info[item].aggr_space_attributes.physical_used_percent }} < 70"
    - not item.startswith("aggr0")
    - ontap_facts.aggregate_info[item].aggr_raid_attributes.aggregate_type in disk_type
    #- ontap_facts.aggregate_info[item].aggregate_name in ontap_facts.vserver_info[vserver].aggr_list.aggr_name 
    #add more intelligent stuff here maybe
    ignore_errors: yes
  - set_fact:
      aggr_select: "{{ (aggr_facts |sort(attribute='used_pct'))[0]['aggr_name'] }}"
  - debug:
      msg: "{{ aggr_select }}"
 
   


      
   
  - name: Volume Create
    na_ontap_volume:
      space_guarantee: none
      state: present
      name: '{{ vol_name }}'
      vserver: '{{ vserver }}'
      aggregate_name: '{{ aggr_select }}'
      size: "{{ size }}"
      size_unit: gb
      encrypt: no
      policy: default
      percent_snapshot_space: 0
      language: en_us
      snapshot_policy : "{{ snap_pol }}"
      type: RW
      volume_security_style: ntfs
      junction_path: '/{{ vol_name }}'
      hostname: '{{ hostname }}'
      username: '{{ username }}'
      password: '{{ password }}'
      # use_rest: Never
      https: true
      validate_certs: false

  - name: Create CIFS share
    na_ontap_cifs:
      state: present
      share_name: "{{ vol_name }}"
      path: "/{{ vol_name }}"
      vserver: "{{ vserver }}"
      share_properties: browsable,oplocks,show_previous_versions,changenotify
      # symlink_properties: read_only,enable
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      # use_rest: Never
      https: true
      validate_certs: false

  - name: Create CIFS share acl
    na_ontap_cifs_acl:
      state: present
      share_name: "{{ vol_name }}" #"{{ share_name }}"
      user_or_group: "Authenticated Users"
      permission: full_control
      vserver: "{{ vserver }}"
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      https: true
      validate_certs: false
  - name: Modify CIFS share acl permission
    na_ontap_cifs_acl:
      state: absent
      share_name: "{{ vol_name }}" #"{{ share_name }}"
      user_or_group: Everyone
      permission: full_control
      vserver: "{{ vserver }}"
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      https: true
      validate_certs: false

      
  - name: run ontap cli command
    na_ontap_command:
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      command: ['volume', 'modify', "{{ vol_name }}", '-vserver', "{{ vserver }}", '-space-nearly-full-threshold-percent', '90', '-space-full-threshold-percent', '95' ]
      https: true
      validate_certs: false
       
  - name: Enable Volume efficiency
    na_ontap_volume_efficiency:
      state: present
      vserver: "{{ vserver }}"
      path: "/vol/{{ vol_name }}"
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      https: true
      validate_certs: false
      

#Create DR side


#  - name: Unset variables
#    set_fact: 
#      ontap_facts:
#      aggr_facts:
#      aggr_select:
      
  - name: Get SnapMirror job schedule 
    na_ontap_info: 
      state: info 
      hostname: "{{ sec_cluster }}" 
      username: "{{ username }}" 
      password: "{{ password }}" 
      https: true 
      validate_certs: false
      gather_subset: "job_schedule_cron_info"
    register: ontap_info
  - debug:
      msg: "{{ ontap_info.ontap_info.job_schedule_cron_info }}"
  - set_fact:
      job_sched: "{{job_sched|default([]) + [ ontap_info.ontap_info.job_schedule_cron_info[item].job_schedule_name ]  }}"
    with_items: "{{ ontap_info.ontap_info.job_schedule_cron_info }}"
    when: ontap_info.ontap_info.job_schedule_cron_info[item].job_schedule_name is search("M.*-.*") 
  - set_fact:
      job_sched: "{{ job_sched |random }}"       
      
  - name: Gather facts 
    na_ontap_gather_facts: 
      state: info 
      hostname: "{{ sec_cluster }}" 
      username: "{{ username }}" 
      password: "{{ password }}" 
      https: true 
      validate_certs: false
      gather_subset: "aggregate_info"
  - set_fact:
      sec_aggr_facts: "{{ sec_aggr_facts|default([]) + [ {'aggr_name': ontap_facts.aggregate_info[item].aggregate_name, 'used_pct': ontap_facts.aggregate_info[item].aggr_space_attributes.physical_used_percent} ] }}"
    with_items: "{{ ontap_facts.aggregate_info }}"
    when:
    - "{{ ontap_facts.aggregate_info[item].aggr_space_attributes.physical_used_percent }} < 70"
    - not item.startswith("aggr0")
    - ontap_facts.aggregate_info[item].aggr_raid_attributes.aggregate_type == "hdd"
    #- ontap_facts.aggregate_info[item].aggregate_name in ontap_facts.vserver_info[vserver].aggr_list.aggr_name 
    #add more intelligent stuff here maybe
    ignore_errors: yes
  - set_fact:
      sec_aggr_select: "{{ (sec_aggr_facts |sort(attribute='used_pct'))[0]['aggr_name'] }}"
  - debug:
      msg: "{{ sec_aggr_select }}"


  - name: Volume Create
    na_ontap_volume:
      space_guarantee: none
      state: present
      name: 'mir_{{ vol_name }}'
      vserver: 'mir_{{ vserver }}'
      aggregate_name: '{{ sec_aggr_select }}'
      size: "{{ size }}"
      size_unit: gb
      encrypt: no
      policy: default
      percent_snapshot_space: 0
      language: en_us
      type: DP
      volume_security_style: ntfs
      hostname: '{{ sec_cluster }}'
      username: '{{ username }}'
      password: '{{ password }}'
      # use_rest: Never
      https: true
      validate_certs: false

  - name: Create ONTAP/ONTAP SnapMirror
    na_ontap_snapmirror:
      state: present
      source_volume: "{{ vol_name }}"
      destination_volume: "mir_{{ vol_name }}"
      source_vserver: "{{ vserver }}"
      destination_vserver: "mir_{{ vserver }}"
      schedule: "{{ job_sched }}"
      policy: MirrorAllSnapshots
      #max_transfer_rate: 1000
      initialize: True
      hostname: "{{ sec_cluster }}"
      username: "{{ username }}"
      password: "{{ password }}"
      https: true
      validate_certs: false
      
      
  - name: Modify volume autosize
    na_ontap_volume_autosize:
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      volume: "{{ vol_name }}"
      mode: grow
      grow_threshold_percent: "90"
      vserver: "{{ vserver }}"
      use_rest: never
      https: true
      validate_certs: false
      
  - name: Modify volume autosize
    na_ontap_volume_autosize:
      hostname: "{{ sec_cluster }}"
      username: "{{ username }}"
      password: "{{ password }}"
      volume: "mir_{{ vol_name }}"
      mode: grow
      grow_threshold_percent: "90"
      vserver: "mir_{{ vserver }}"  
      use_rest: never
      https: true
      validate_certs: false
      
  - name: run ontap cli command
    na_ontap_command:
      hostname: "{{ sec_cluster }}"
      username: "{{ username }}"
      password: "{{ password }}"
      command: ['volume', 'modify', "mir_{{ vol_name }}", '-vserver', "mir_{{ vserver }}", '-space-nearly-full-threshold-percent', '90', '-space-full-threshold-percent', '95' ]
      https: true
      validate_certs: false
      
      
###
# Don't forget to set thresholds and standards on volumes

# Nearly full 90
# Full 95
# -Snap autodelete off, should be by default
# autogrow thresholds 90 
# -no vol encryption. NAE instead of NVE on arrays with encryption
# vol efficiency enable
# efficiency policy
 #don't set a policy and see what it gets by default on all clusters
 #auto for AFF
 #default for FAS
 
###      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
#  - debug:
#      msg: "{{ ontap_facts.aggregate_info[item].aggr_space_attributes.size_available | int / 1024 / 1024 / 1024}} > {{ size }}"  
  
  
#  - name: Create Volume 
#    na_ontap_volume: 
#      state: present 
#      name: fact_test 
#      vserver: vserver1 
#      aggregate_name: "{{ item }}" 
#      size: "{{ size }}" 
#      size_unit: gb 
#      hostname: "{{ hostname }}" 
#      username: "{{ username }}" 
#      password: "{{ password }}" 
#      https: "{{ https }}" 
#      validate_certs: "{{ validate_certs }}" 
#    register: result 
#    with_items: "{{ ontap_facts.aggregate_info }}" 
#    when: 
#    - "{{ ontap_facts.aggregate_info[item].aggr_space_attributes.size_available | int / 1024 / 1024 / 1024}} > {{ size }}" 
#    - not item.startswith("aggr0") 
#    - result is not defined or result.rc != 0 
#    ignore_errors: yes
#     
  
